 webpack-get-started
 npm install -g webpack
1.1 安装
　　全局安装：
npm install -g create-react-app
1.2 创建应用
npx create-react-app libing.react
netstat -ano | findstr 端口号
taskkill 
1.3 运行应用
cd libing.react
npm start
npm i react-admin-lte --save-dev   //jwt-decode
npm i jwt-decode --save-dev
npm i  shortid --save-dev
npm i  lodash --save-dev
npm i  react-redux --save-dev
npm i  redux --save-dev
npm i  --save-dev  react-redux redux   lodash http-proxy-middleware redux-thunk redux-logger react-router-dom
npm install antd --save
npm install classnames --save
npm run eject
npm install --save express
npm install --save axios
npm install http-proxy-middleware --save
 npm install redux-devtools-extension --save
 npm install redux-thunk --save -dev      //react-logger
 npm install redux-logger --save-dev
 npm install jwt-decode --save-dev
 npm install validator --save-dev

router :
npm install react-router-dom --save
npm add antd
//按需加载
npm run eject
npm install babel-plugin-import --save-dev
  "babel": {
    "presets": [
      "react-app"
    ],
    "plugins": [
      [
        "import",
        {
          "libraryName": "antd",
          "libraryDirectory": "es",
          "style": "css"
        }
      ]
    ]
  }

http.httpBasic()
 and()
.authorizeRequests.anyRequest()
.authenticated()

https://reacttraining.com/react-router/web/guides/quick-start
http://cn.redux.js.org/docs/introduction/Examples.html
跨域
npm run eject
npm install --save express
 
npm install http-proxy-middleware --save

const { createProxyMiddleware } = require('http-proxy-middleware');
module.exports = function(app) {
  app.use(
    '/api',
    createProxyMiddleware({
      target: 'http://localhost:5000',
      changeOrigin: true,
    })
  );
};

,includeFilters = {
        @ComponentScan.Filter(type= FilterType.ANNOTATION,classes = {Controller.class})
}

iwenwiki.com/api  //
yunp.top/blog/index.php/2016/05/12/44
http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.billboard.billList&type=1&size=10&offset=0
import qs from "querystring" //对象转字符串
redux
npm install --save-dev redux




const fetchPosts = reddit => dispatch => {

  dispatch(requestPosts(reddit))
  return fetch(`https://www.reddit.com/r/${reddit}.json`)
    .then(response => response.json())
    .then(json => dispatch(receivePosts(reddit, json)))
}

var fetchPosts = function fetchPosts(reddit) {
  return function (dispatch) {

    dispatch(requestPosts(reddit));
    return fetch("https://www.reddit.com/r/" + reddit + ".json").then(function (response) {
      return response.json();
    }).then(function (json) {
      return dispatch(receivePosts(reddit, json));
    });
  };
};

function withFetch(url)
{
return aa(View)
{
 return class extends Component {
        constructor() {
            super()
            this.state = {
                loading: true,
                data: null
            }
        }
        componentDidMount() {
            fetch(url)
                .then(res => res.json())
                .then(data => {
                    console.log(data)
                    this.setState({
                        loading: false,
                        data: data
                    })
                })
        }
        render() {
            if (this.state.loading) {
                return <div>loading</div>
            } else {
                return <View data={this.state.data}></View>
            }
        }
    }
}
}


首先配置好数据库,数据库环境是SQL SERVER ,好数据和权限表


export default class Routers extends React.Component {
    render() {
        return (
            <div >
                {/* <Main>         
                <Route  path='/main/demo' component={Demo}/>     
        </Main> */}
                {/* <Route exact path='/' component={Main}/>     */}
                {/* strict exact  <Route exact path='/main/demo' component={Demo}/> */}
                {/* <Route  path='/main' component={Main}> 
          <Route path="/main/demo" component={Demo}/> 
           </Route>  */}

                <Route path="/main" render={() =>
                    <Main>
                        <Route path="/main/demo" component={Demo} />
                        {/* <Route path="/detail/DetailChildOne" component={DetailChildOne} /> */}
                    </Main>
                } />
                <Route exact path='/login' component={Login} />
            </div>
        )
    }
}